@page "/chat"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    <div class="chat-input">
        <div class="input-group">
            <input @bind="userInput" placeholder="Your name" class="form-control" />
            <input @bind="messageInput" placeholder="Type your message" class="form-control"
                   @onkeypress="HandleKeyPress" />
            <button @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">
                Send
            </button>
        </div>
    </div>

    <div class="chat-messages">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput = "User";
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = "";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Send();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        max-width: 800px;
        margin: 0 auto;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
    }

    .chat-input {
        margin-bottom: 20px;
    }

    .input-group {
        display: flex;
        gap: 10px;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        border: 1px solid #eee;
        padding: 10px;
        border-radius: 5px;
    }

    #messagesList {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    #messagesList li {
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }
</style>